name: build-deploy
on:
    push:
        paths-ignore:
            - '*.md'
            - 'docs/**'
    pull_request:
        paths-ignore:
            - '*.md'
            - 'docs/**'
jobs:
    release-electron:
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
                electron-arch-overrides: ['']
                include:
                    - os: macos-latest
                      electron-arch-overrides: '-c.mac.target.target=dmg -c.mac.target.arch=x64'
                    - os: macos-latest
                      electron-arch-overrides: '-c.mac.target.target=dmg -c.mac.target.arch=arm64'

        env:
            USE_HARD_LINKS: false
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2
              with:
                  node-version: '16.13.1'

            - name: Cache node modules
              uses: actions/cache@v2
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ./node_modules
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            - run: mkdir ./dgraph-download

            # Gets releases from dgraph
            - uses: robinraju/release-downloader@v1.3
              if: runner.os == 'Linux'
              with:
                  repository: 'TheExGenesis/dgraph'
                  latest: true
                  fileName: 'dgraph_linux_amd64'
                  out-file-path: ./dgraph-download
            - run: mv ./dgraph-download/dgraph_linux_amd64 ./dgraph-download/dgraph
              if: runner.os == 'Linux'

            - uses: robinraju/release-downloader@v1.3
              if: runner.os == 'Windows'
              with:
                  repository: 'TheExGenesis/dgraph'
                  latest: true
                  fileName: 'dgraph_windows_amd64.exe'
                  out-file-path: ./dgraph-download
            - run: mv ./dgraph-download/dgraph_windows_amd64.exe ./dgraph-download/dgraph.exe
              if: runner.os == 'Windows'

            - uses: robinraju/release-downloader@v1.3
              if: runner.os == 'macOS'
              with:
                  repository: 'TheExGenesis/dgraph'
                  latest: true
                  fileName: 'dgraph_darwin_amd64'
                  out-file-path: ./dgraph-download
            - run: mv ./dgraph-download/dgraph_darwin_amd64 ./dgraph-download/dgraph
              if: runner.os == 'macOS'

            - run: chmod +x ./dgraph-download/dgraph
              if: runner.os != 'Windows'

            # Builds app
            - run: yarn install

            - run: yarn prepare-electron

            - name: Build and Publish Electron App
              uses: samuelmeuli/action-electron-builder@master
              with:
                  # Don't run `yarn build`, which otherwise happens by default
                  skip_build: true
                  # GitHub token, automatically provided to the action
                  # (No need to define this secret in the repo settings)
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  release: ${{ startsWith(github.ref, 'refs/tags/v') }}
                  package_root: 'packages/unigraph-dev-electron'
                  # macOS code signing certificate
              #     mac_certs: ${{ secrets.mac_certs }}
              #     mac_certs_password: ${{ secrets.mac_certs_password }}
              # env:
              #     # macOS notarization API key
              #     API_KEY_ID: ${{ secrets.mac_notarization_api_key_id }}
              #     API_KEY_ISSUER_ID: ${{ secrets.mac_notarization_api_key_issuer_id }}
